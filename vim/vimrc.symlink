if 0 | endif

if has('vim_starting')
  if &compatible
    set nocompatible
    filetype off
  endif

  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#begin(expand('~/.vim/bundle/'))

NeoBundleFetch 'Shougo/neobundle.vim'

NeoBundle 'tpope/vim-fugitive'
NeoBundle 'kien/ctrlp.vim'
NeoBundle 'scrooloose/nerdcommenter'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'tpope/vim-markdown'
NeoBundle 'tpope/vim-commentary.git'
NeoBundle 'tpope/vim-surround'
NeoBundle 'godlygeek/tabular'
NeoBundle 'Valloric/YouCompleteMe'
NeoBundle 'bling/vim-airline'
NeoBundle 'Raimondi/delimitMate'
NeoBundle 'wavded/vim-stylus'
NeoBundle 'AndrewRadev/splitjoin.vim'
NeoBundle 'wesQ3/vim-windowswap'
NeoBundle 'derekwyatt/ag.vim'
NeoBundle 'fatih/vim-go'
NeoBundle 'duythinht/vim-coffee'
NeoBundle 'Chiel92/vim-autoformat'
NeoBundle 'terryma/vim-multiple-cursors'
NeoBundle 'airblade/vim-gitgutter'
NeoBundle 'mtscout6/vim-cjsx'
NeoBundle 'whatyouhide/vim-gotham'
NeoBundle 'dyng/ctrlsf.vim'
NeoBundle 'dbakker/vim-projectroot'
NeoBundle 'majutsushi/tagbar'
NeoBundle 'lukaszkorecki/CoffeeTags'
NeoBundle 'morhetz/gruvbox'
NeoBundle 'Shougo/neocomplete'
NeoBundle 'heavenshell/vim-jsdoc'
NeoBundle 'ternjs/tern_for_vim'
NeoBundle 'pangloss/vim-javascript'
NeoBundle 'heavenshell/vim-jsdoc'
NeoBundle 'freitass/todo.txt-vim'
NeoBundle 'jtratner/vim-flavored-markdown'
NeoBundle 'tpope/vim-obsession'
NeoBundle 'zhaocai/GoldenView.Vim'
NeoBundle 'vim-scripts/MPage'
NeoBundle 'afshinm/npm.vim'
NeoBundle 'kylef/apiblueprint.vim'
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'w0ng/vim-hybrid'
NeoBundle 'mattn/gist-vim', {'depends': 'mattn/webapi-vim'}
NeoBundle 'leafgarland/typescript-vim'
NeoBundle 'Shougo/vimproc.vim', {
\ 'build' : {
\     'windows' : 'tools\\update-dll-mingw',
\     'cygwin' : 'make -f make_cygwin.mak',
\     'mac' : 'make',
\     'linux' : 'make',
\     'unix' : 'gmake',
\    },
\ }


call neobundle#end()
filetype plugin indent on

NeoBundleCheck

syntax enable

set visualbell
set noerrorbells               " No beeps
set number                     " Show line numbers

set backspace=indent,eol,start " Makes backspace key work normally
set showcmd                    " Shows what is typed
set showmode                   " Show current mode

set noswapfile                 " Don't use swapfile
set nobackup                   " Don't create backup files
set splitright                 " Split vertical windows right
set splitbelow                 " Split horizontal windows below
set encoding=utf-8             " Set default encoding to UTF-8
set autowrite                  " Automatically save before :next, :make etc.
set autoread                   " Automatically reread changed files without asking me anything
set laststatus=2               " Always show status bar
set statusline=%f\ %=L:%l/%L\ %c\ (%p%%)

set wildmenu

set fileformats=unix,dos,mac   " Prefer Unix over Windows over OS 9 formats

" control with mouse ~will probably turn off
set mouse=a

" http://stackoverflow.com/questions/20186975/vim-mac-how-to-copy-to-clipboard-without-pbcopy
" set clipboard^=unnamed
" set clipboard^=unnamedplus

set noshowmatch                     " Do not show matching brackets by flickering
set lazyredraw                      " Wait to redraw
set incsearch                       " Shows the match while typing
set hlsearch                        " Highlight found searches
set ignorecase                      " Search case insensitive...
set smartcase                       " ... but not when search pattern contains upper case characters
set ttyfast
set list listchars=tab:\ \ ,trail:Â·,nbsp:Â· " highlight tailing whitespace

set nowrap

set expandtab
set tabstop=2
set smarttab
set shiftwidth=2

set scrolloff=5

" Different tab-space styles for different languages
autocmd BufNewFile,BufReadPost *.coffee setl shiftwidth=2 expandtab " CoffeeScript
autocmd BufNewFile,BufReadPost *.js     setl shiftwidth=2 expandtab " JavaScript

" lets make sure we don't show these files
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*.,*/.DS_Store

autocmd BufEnter * silent! lcd %:p:h " set context to current file's directory

syntax enable
set timeout timeoutlen=500 ttimeoutlen=1



set t_Co=256
" let &t_Co=256
" let &t_Co=16
let g:hybrid_custom_term_colors = 1
let g:hybrid_reduced_contrast = 0 " Remove this line if using the default palette.
set bg=dark
colorscheme hybrid

let coffee_compiler = '~/.nvm/v0.10.40/bin/cjsx'

let g:CoffeeAutoTagIncludeVars=0
let g:CoffeeAutoTagTagRelative=0

let g:vimroom_background='black'

" JsDoc configuration
let g:jsdoc_additional_descriptions=0
let g:jsdoc_input_description=1
let g:jsdoc_allow_input_prompt=1
let g:jsdoc_return=1
let g:jsdoc_return_type=1
let g:jsdoc_return_description=1
let g:jsdoc_access_descriptions=2
let g:jsdoc_underscore_private=1
let g:jsdoc_param_description_separator=' - '
let g:jsdoc_enable_es6=1

" Goldenview settings
let g:goldenview__enable_default_mapping = 0

" gist-vim settings
let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1
let g:gist_show_privates = 1
let g:gist_post_private = 1


" set color column to lighter grey
hi ColorColumn ctermbg=236

" show only underline for search highlights
hi Search ctermbg=NONE ctermfg=NONE cterm=underline

" gitgutter column bg
hi clear SignColumn
hi SignColumn ctermfg=none ctermbg=none

autocmd BufNewFile,BufReadPost *.coffee setl colorcolumn=80
autocmd BufNewFile,BufReadPost *.styl setl colorcolumn=28

" remove whitespace on save
autocmd BufWritePre * :%s/\s\+$//e

let mapleader=","

" map ; to : for normal mode
nnoremap ; :

nnoremap <Leader>ww <Plug>VimwikiIndex

nnoremap <Leader>ef :MPage 2<cr>

" toggle VimRoom
nnoremap <silent> <Leader>mz <Plug>VimroomToggle

" Remove search highlight
nnoremap <leader><space> :nohlsearch<cr>

" Awesome CTRJSF maps
nnoremap <C-F>f :echo yo

" Shortcut for :b#
nnoremap <leader><leader> <c-^>

" open todo.txt in a vertical split
nnoremap <leader>t :vs ~/todo.txt<cr>


nmap <leader>a gcc
vmap <leader>a gc

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :vs $MYVIMRC<cr>
nmap <silent> <leader>sv :so $MYVIMRC<cr>

" Use space for space in normal mode
nmap <space> i<space><C-c>l

" Better split switching
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Map Esc to nop in insert mode so get used to `jj` combo
inoremap <esc> <nop>

" map jj to Esc (<C-c> is another way of exiting instert mode)
imap jj <C-c>


" Better split opening
" map <leader>` <c-w>v<c-l>
nnoremap <bar> :vsp<cr>
nnoremap _ :sp<cr>

" Relative navigation between tabs
nnoremap t[ :tabprev<cr>
nnoremap t] :tabnext<cr>
nnoremap tt :tabe<cr>

if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" ctrlp configs
let g:ctrlp_max_height=15
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git'
let g:ctrlp_switch_buffer = 'et'              " jump to a file if it's open already
let g:ctrlp_use_caching = 1
let g:ctrlp_max_files=0                       " do not limit the number of searchable files
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'

" CtrlSF bindings
nmap     <C-F>f :ProjectRootExe CtrlSF<space>
vmap     <C-F>f <Plug>CtrlSFVwordPath
vmap     <C-F>F <Plug>CtrlSFVwordExec
nmap     <C-F>n <Plug>CtrlSFCwordPath
nmap     <C-F>p <Plug>CtrlSFPwordPath
nnoremap <C-F>o :CtrlSFOpen<cr>
nnoremap <C-F>t :CtrlSFToggle<cr>
inoremap <C-F>t <Esc>:CtrlSFToggle<cr>

noremap <leader>kb :NERDTreeToggle<cr>

let NERDTreeIgnore=['\.o$', '\~$', 'tags$']

map <leader>pi :NeoBundleInstall<cr>

map <leader>j :!npm test<cr>

map <leader>b :!gulp browserify<cr>

map <leader>n :!coffee %<cr>

map <leader>: :Tabularize /:<cr>
map <leader>= :Tabularize /=<cr>
map <leader>" :Tabularize /"<cr>

map <leader>1 1gt
map <leader>2 1gt
map <leader>3 1gt
map <leader>4 1gt
map <leader>5 1gt

" Search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
nnoremap n nzzzv
nnoremap N Nzzzv

" Map Shift-G to be in the center
nmap <S-G> <S-G>zz

" toggle between relative and absolute line numbers
function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber
    set number
  else
    set relativenumber
  endif
endfunc
nnoremap <C-\> :call NumberToggle()<cr>

let g:airline_powerline_fonts=1

" persist undos across sessions
try
  set undodir=~/.vim_runtime/temp_dirs/undodir
  set undofile
catch
endtry

" Add new lines before entering insert mode
nnoremap <Enter> o<Esc>
nnoremap <c-cr> O<cr><Esc>

if has("gui_macvim")
  set guifont=InputMono\ Light\ for\ Powerline:h14
endif

if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\e[5 q\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\e[2 q\<Esc>\\"
else
    let &t_SI = "\e[5 q"
    let &t_EI = "\e[2 q"
endif

" MACROS

" Add markdox definition to method. Just placeholder.
let @m = 'O€kb###* *€kb###'

let @a = 'O€kb###o€kb *o€kb***€kb€kb€kb###kkA*jA '

let @c = 'ireturn callback err  if err'

function! s:get_visual_selection()
  " Why is this not a built-in Vim script function?!
  let [lnum1, col1] = getpos("'<")[1:2]
  let [lnum2, col2] = getpos("'>")[1:2]
  let lines = getline(lnum1, lnum2)
  let lines[-1] = lines[-1][: col2 - (&selection == 'inclusive' ? 1 : 2)]
  let lines[0] = lines[0][col1 - 1:]
  return join(lines, "\n")
endfunction

vmap <leader> :call s:get_visual_selection()<cr>

